// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OnCallEntry on call entry
// swagger:model OnCallEntry
type OnCallEntry struct {

	// on call type
	// Required: true
	OnCallType OnCallType `json:"onCallType"`

	// on call user
	OnCallUser *User `json:"onCallUser,omitempty"`

	// override on call user
	OverrideOnCallUser *User `json:"overrideOnCallUser,omitempty"`

	// rolls
	// Required: true
	Rolls []*OnCallRoll `json:"rolls"`

	// rotation name
	RotationName string `json:"rotationName,omitempty"`

	// shift name
	ShiftName string `json:"shiftName,omitempty"`

	// The shift roll time (ISO 8601)
	ShiftRoll string `json:"shiftRoll,omitempty"`
}

// Validate validates this on call entry
func (m *OnCallEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateOnCallType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnCallUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOverrideOnCallUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRolls(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OnCallEntry) validateOnCallType(formats strfmt.Registry) error {

	if err := m.OnCallType.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("onCallType")
		}
		return err
	}

	return nil
}

func (m *OnCallEntry) validateOnCallUser(formats strfmt.Registry) error {

	if swag.IsZero(m.OnCallUser) { // not required
		return nil
	}

	if m.OnCallUser != nil {
		if err := m.OnCallUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("onCallUser")
			}
			return err
		}
	}

	return nil
}

func (m *OnCallEntry) validateOverrideOnCallUser(formats strfmt.Registry) error {

	if swag.IsZero(m.OverrideOnCallUser) { // not required
		return nil
	}

	if m.OverrideOnCallUser != nil {
		if err := m.OverrideOnCallUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("overrideOnCallUser")
			}
			return err
		}
	}

	return nil
}

func (m *OnCallEntry) validateRolls(formats strfmt.Registry) error {

	if err := validate.Required("rolls", "body", m.Rolls); err != nil {
		return err
	}

	for i := 0; i < len(m.Rolls); i++ {
		if swag.IsZero(m.Rolls[i]) { // not required
			continue
		}

		if m.Rolls[i] != nil {
			if err := m.Rolls[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("rolls" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *OnCallEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OnCallEntry) UnmarshalBinary(b []byte) error {
	var res OnCallEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
