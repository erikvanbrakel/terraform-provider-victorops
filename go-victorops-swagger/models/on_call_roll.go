// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// OnCallRoll on call roll
// swagger:model OnCallRoll
type OnCallRoll struct {

	// The on-call period end time (ISO 8601)
	// Required: true
	End *string `json:"end"`

	// is roll
	// Required: true
	IsRoll *bool `json:"isRoll"`

	// on call user
	OnCallUser *User `json:"onCallUser,omitempty"`

	// The on-call period start time (ISO 8601)
	// Required: true
	Start *string `json:"start"`
}

// Validate validates this on call roll
func (m *OnCallRoll) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnd(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsRoll(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnCallUser(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStart(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *OnCallRoll) validateEnd(formats strfmt.Registry) error {

	if err := validate.Required("end", "body", m.End); err != nil {
		return err
	}

	return nil
}

func (m *OnCallRoll) validateIsRoll(formats strfmt.Registry) error {

	if err := validate.Required("isRoll", "body", m.IsRoll); err != nil {
		return err
	}

	return nil
}

func (m *OnCallRoll) validateOnCallUser(formats strfmt.Registry) error {

	if swag.IsZero(m.OnCallUser) { // not required
		return nil
	}

	if m.OnCallUser != nil {
		if err := m.OnCallUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("onCallUser")
			}
			return err
		}
	}

	return nil
}

func (m *OnCallRoll) validateStart(formats strfmt.Registry) error {

	if err := validate.Required("start", "body", m.Start); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *OnCallRoll) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *OnCallRoll) UnmarshalBinary(b []byte) error {
	var res OnCallRoll
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
