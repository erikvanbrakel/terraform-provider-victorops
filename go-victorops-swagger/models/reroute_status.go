// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// RerouteStatus reroute status
// swagger:model RerouteStatus
type RerouteStatus struct {

	// incident number
	// Required: true
	IncidentNumber *string `json:"incidentNumber"`

	// message
	Message string `json:"message,omitempty"`

	// success
	// Required: true
	Success *bool `json:"success"`

	// target status
	// Required: true
	TargetStatus []*RerouteTargetStatus `json:"targetStatus"`
}

// Validate validates this reroute status
func (m *RerouteStatus) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIncidentNumber(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSuccess(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTargetStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *RerouteStatus) validateIncidentNumber(formats strfmt.Registry) error {

	if err := validate.Required("incidentNumber", "body", m.IncidentNumber); err != nil {
		return err
	}

	return nil
}

func (m *RerouteStatus) validateSuccess(formats strfmt.Registry) error {

	if err := validate.Required("success", "body", m.Success); err != nil {
		return err
	}

	return nil
}

func (m *RerouteStatus) validateTargetStatus(formats strfmt.Registry) error {

	if err := validate.Required("targetStatus", "body", m.TargetStatus); err != nil {
		return err
	}

	for i := 0; i < len(m.TargetStatus); i++ {
		if swag.IsZero(m.TargetStatus[i]) { // not required
			continue
		}

		if m.TargetStatus[i] != nil {
			if err := m.TargetStatus[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("targetStatus" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *RerouteStatus) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *RerouteStatus) UnmarshalBinary(b []byte) error {
	var res RerouteStatus
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
