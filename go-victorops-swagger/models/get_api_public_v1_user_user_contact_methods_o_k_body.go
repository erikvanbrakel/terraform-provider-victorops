// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// GetAPIPublicV1UserUserContactMethodsOKBody get Api public v1 user user contact methods o k body
// swagger:model getApiPublicV1UserUserContactMethodsOKBody
type GetAPIPublicV1UserUserContactMethodsOKBody struct {

	// devices
	Devices []*ContactDevice `json:"devices"`

	// emails
	Emails []*UserContact `json:"emails"`

	// phones
	Phones []*UserContact `json:"phones"`
}

// Validate validates this get Api public v1 user user contact methods o k body
func (m *GetAPIPublicV1UserUserContactMethodsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDevices(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePhones(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetAPIPublicV1UserUserContactMethodsOKBody) validateDevices(formats strfmt.Registry) error {

	if swag.IsZero(m.Devices) { // not required
		return nil
	}

	for i := 0; i < len(m.Devices); i++ {
		if swag.IsZero(m.Devices[i]) { // not required
			continue
		}

		if m.Devices[i] != nil {
			if err := m.Devices[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("devices" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetAPIPublicV1UserUserContactMethodsOKBody) validateEmails(formats strfmt.Registry) error {

	if swag.IsZero(m.Emails) { // not required
		return nil
	}

	for i := 0; i < len(m.Emails); i++ {
		if swag.IsZero(m.Emails[i]) { // not required
			continue
		}

		if m.Emails[i] != nil {
			if err := m.Emails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("emails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *GetAPIPublicV1UserUserContactMethodsOKBody) validatePhones(formats strfmt.Registry) error {

	if swag.IsZero(m.Phones) { // not required
		return nil
	}

	for i := 0; i < len(m.Phones); i++ {
		if swag.IsZero(m.Phones[i]) { // not required
			continue
		}

		if m.Phones[i] != nil {
			if err := m.Phones[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("phones" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetAPIPublicV1UserUserContactMethodsOKBody) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetAPIPublicV1UserUserContactMethodsOKBody) UnmarshalBinary(b []byte) error {
	var res GetAPIPublicV1UserUserContactMethodsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
