// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// IncidentTarget incident target
// swagger:model IncidentTarget
type IncidentTarget struct {

	// User name or escalation policy slug
	// Required: true
	Slug *string `json:"slug"`

	// Type of target
	// Required: true
	// Enum: [User EscalationPolicy]
	Type *string `json:"type"`
}

// Validate validates this incident target
func (m *IncidentTarget) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSlug(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IncidentTarget) validateSlug(formats strfmt.Registry) error {

	if err := validate.Required("slug", "body", m.Slug); err != nil {
		return err
	}

	return nil
}

var incidentTargetTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["User","EscalationPolicy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		incidentTargetTypeTypePropEnum = append(incidentTargetTypeTypePropEnum, v)
	}
}

const (

	// IncidentTargetTypeUser captures enum value "User"
	IncidentTargetTypeUser string = "User"

	// IncidentTargetTypeEscalationPolicy captures enum value "EscalationPolicy"
	IncidentTargetTypeEscalationPolicy string = "EscalationPolicy"
)

// prop value enum
func (m *IncidentTarget) validateTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, incidentTargetTypeTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *IncidentTarget) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IncidentTarget) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IncidentTarget) UnmarshalBinary(b []byte) error {
	var res IncidentTarget
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
