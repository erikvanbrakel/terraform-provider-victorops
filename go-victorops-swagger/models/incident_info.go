// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// IncidentInfo Incidents contain the following fields (all should be considered optional)
// swagger:model IncidentInfo
type IncidentInfo struct {

	// The time of the last acknowledgment of the incident
	AckTime string `json:"ackTime,omitempty"`

	// ack user
	AckUser *AckUser `json:"ackUser,omitempty"`

	// The VictorOps user id of the user that acknowledged the incident
	AckUserID string `json:"ackUserId,omitempty"`

	// The number of alerts received for this incident
	AlertCount float64 `json:"alertCount,omitempty"`

	// The current phase of the incident "resolved", "triggered" or "acknowledged".
	CurrentPhase string `json:"currentPhase,omitempty"`

	// The time the incident ended
	EndTime string `json:"endTime,omitempty"`

	// The display name of the entity causing the incident
	EntityDispName string `json:"entityDispName,omitempty"`

	// The unique identification of the entity being monitored that caused the incident
	EntityID string `json:"entityId,omitempty"`

	// The type of entity causing the incident (host/service)
	EntityType string `json:"entityType,omitempty"`

	// The host on which the incident occurred
	Host string `json:"host,omitempty"`

	// The VictorOps incident number
	IncidentNumber string `json:"incidentNumber,omitempty"`

	// The unique id of the last alert for the incident
	LastAlertID string `json:"lastAlertID,omitempty"`

	// The time of the last alert received for the incident
	LastAlertTime string `json:"lastAlertTime,omitempty"`

	// The service name causing the incident (if any)
	Service string `json:"service,omitempty"`

	// The time the incident started
	StartTime string `json:"startTime,omitempty"`

	// The teams that were paged for the incident (comma separated).
	Teams string `json:"teams,omitempty"`
}

// Validate validates this incident info
func (m *IncidentInfo) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAckUser(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *IncidentInfo) validateAckUser(formats strfmt.Registry) error {

	if swag.IsZero(m.AckUser) { // not required
		return nil
	}

	if m.AckUser != nil {
		if err := m.AckUser.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("ackUser")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *IncidentInfo) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *IncidentInfo) UnmarshalBinary(b []byte) error {
	var res IncidentInfo
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
