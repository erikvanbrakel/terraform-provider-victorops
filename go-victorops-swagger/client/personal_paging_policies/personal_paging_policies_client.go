// Code generated by go-swagger; DO NOT EDIT.

package personal_paging_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new personal paging policies API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for personal paging policies API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteAPIPublicV1ProfileUsernamePoliciesStepRule deletes a rule from a paging policy step

Delete a rule from a paging policy step

This API may be called a maximum of 15 times per minute.

*/
func (a *Client) DeleteAPIPublicV1ProfileUsernamePoliciesStepRule(params *DeleteAPIPublicV1ProfileUsernamePoliciesStepRuleParams) (*DeleteAPIPublicV1ProfileUsernamePoliciesStepRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIPublicV1ProfileUsernamePoliciesStepRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPIPublicV1ProfileUsernamePoliciesStepRule",
		Method:             "DELETE",
		PathPattern:        "/api-public/v1/profile/{username}/policies/{step}/{rule}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIPublicV1ProfileUsernamePoliciesStepRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAPIPublicV1ProfileUsernamePoliciesStepRuleOK), nil

}

/*
GetAPIPublicV1ProfileUsernamePolicies gets the user s paging policy

Get all the paging policy steps for the user on the org associated with the API key

This API may be called a maximum of 15 times per minute.

*/
func (a *Client) GetAPIPublicV1ProfileUsernamePolicies(params *GetAPIPublicV1ProfileUsernamePoliciesParams) (*GetAPIPublicV1ProfileUsernamePoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIPublicV1ProfileUsernamePoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIPublicV1ProfileUsernamePolicies",
		Method:             "GET",
		PathPattern:        "/api-public/v1/profile/{username}/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIPublicV1ProfileUsernamePoliciesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIPublicV1ProfileUsernamePoliciesOK), nil

}

/*
GetAPIPublicV1ProfileUsernamePoliciesStep gets a paging policy step

Get a paging policy step

This API may be called a maximum of 15 times per minute.

*/
func (a *Client) GetAPIPublicV1ProfileUsernamePoliciesStep(params *GetAPIPublicV1ProfileUsernamePoliciesStepParams) (*GetAPIPublicV1ProfileUsernamePoliciesStepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIPublicV1ProfileUsernamePoliciesStepParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIPublicV1ProfileUsernamePoliciesStep",
		Method:             "GET",
		PathPattern:        "/api-public/v1/profile/{username}/policies/{step}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIPublicV1ProfileUsernamePoliciesStepReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIPublicV1ProfileUsernamePoliciesStepOK), nil

}

/*
GetAPIPublicV1ProfileUsernamePoliciesStepRule gets a rule from a paging policy step

Get a rule from a paging policy step

This API may be called a maximum of 15 times per minute.

*/
func (a *Client) GetAPIPublicV1ProfileUsernamePoliciesStepRule(params *GetAPIPublicV1ProfileUsernamePoliciesStepRuleParams) (*GetAPIPublicV1ProfileUsernamePoliciesStepRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIPublicV1ProfileUsernamePoliciesStepRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIPublicV1ProfileUsernamePoliciesStepRule",
		Method:             "GET",
		PathPattern:        "/api-public/v1/profile/{username}/policies/{step}/{rule}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIPublicV1ProfileUsernamePoliciesStepRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIPublicV1ProfileUsernamePoliciesStepRuleOK), nil

}

/*
PostAPIPublicV1ProfileUsernamePolicies creates a paging policy step

Create a paging policy step

This API may be called a maximum of 15 times per minute.

*/
func (a *Client) PostAPIPublicV1ProfileUsernamePolicies(params *PostAPIPublicV1ProfileUsernamePoliciesParams) (*PostAPIPublicV1ProfileUsernamePoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIPublicV1ProfileUsernamePoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIPublicV1ProfileUsernamePolicies",
		Method:             "POST",
		PathPattern:        "/api-public/v1/profile/{username}/policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIPublicV1ProfileUsernamePoliciesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIPublicV1ProfileUsernamePoliciesOK), nil

}

/*
PostAPIPublicV1ProfileUsernamePoliciesStep creates a rule for a paging policy step

Create a rule for a paging policy step

This API may be called a maximum of 15 times per minute.

*/
func (a *Client) PostAPIPublicV1ProfileUsernamePoliciesStep(params *PostAPIPublicV1ProfileUsernamePoliciesStepParams) (*PostAPIPublicV1ProfileUsernamePoliciesStepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIPublicV1ProfileUsernamePoliciesStepParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIPublicV1ProfileUsernamePoliciesStep",
		Method:             "POST",
		PathPattern:        "/api-public/v1/profile/{username}/policies/{step}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIPublicV1ProfileUsernamePoliciesStepReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIPublicV1ProfileUsernamePoliciesStepOK), nil

}

/*
PutAPIPublicV1ProfileUsernamePoliciesStep updates a paging policy step

Update a paging policy step

This API may be called a maximum of 15 times per minute.

*/
func (a *Client) PutAPIPublicV1ProfileUsernamePoliciesStep(params *PutAPIPublicV1ProfileUsernamePoliciesStepParams) (*PutAPIPublicV1ProfileUsernamePoliciesStepOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIPublicV1ProfileUsernamePoliciesStepParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAPIPublicV1ProfileUsernamePoliciesStep",
		Method:             "PUT",
		PathPattern:        "/api-public/v1/profile/{username}/policies/{step}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPIPublicV1ProfileUsernamePoliciesStepReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAPIPublicV1ProfileUsernamePoliciesStepOK), nil

}

/*
PutAPIPublicV1ProfileUsernamePoliciesStepRule updates a rule for a paging policy step

Update a rule for a paging policy step

This API may be called a maximum of 15 times per minute.

*/
func (a *Client) PutAPIPublicV1ProfileUsernamePoliciesStepRule(params *PutAPIPublicV1ProfileUsernamePoliciesStepRuleParams) (*PutAPIPublicV1ProfileUsernamePoliciesStepRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIPublicV1ProfileUsernamePoliciesStepRuleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAPIPublicV1ProfileUsernamePoliciesStepRule",
		Method:             "PUT",
		PathPattern:        "/api-public/v1/profile/{username}/policies/{step}/{rule}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPIPublicV1ProfileUsernamePoliciesStepRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAPIPublicV1ProfileUsernamePoliciesStepRuleOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
