// Code generated by go-swagger; DO NOT EDIT.

package users

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new users API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for users API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteAPIPublicV1UserUser removes a user

Remove a user from your organization

This API may be called a maximum of 15 times per minute.

*/
func (a *Client) DeleteAPIPublicV1UserUser(params *DeleteAPIPublicV1UserUserParams) (*DeleteAPIPublicV1UserUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIPublicV1UserUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPIPublicV1UserUser",
		Method:             "DELETE",
		PathPattern:        "/api-public/v1/user/{user}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIPublicV1UserUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAPIPublicV1UserUserOK), nil

}

/*
GetAPIPublicV1User lists users

Get a list of users for your organization

This API may be called a maximum of 15 times per minute.

*/
func (a *Client) GetAPIPublicV1User(params *GetAPIPublicV1UserParams) (*GetAPIPublicV1UserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIPublicV1UserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIPublicV1User",
		Method:             "GET",
		PathPattern:        "/api-public/v1/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIPublicV1UserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIPublicV1UserOK), nil

}

/*
GetAPIPublicV1UserUser retrieves information for a user

Get the information for the specified user

This API may be called a maximum of 15 times per minute.

*/
func (a *Client) GetAPIPublicV1UserUser(params *GetAPIPublicV1UserUserParams) (*GetAPIPublicV1UserUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIPublicV1UserUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIPublicV1UserUser",
		Method:             "GET",
		PathPattern:        "/api-public/v1/user/{user}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIPublicV1UserUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIPublicV1UserUserOK), nil

}

/*
PostAPIPublicV1User adds a user

Add a user to your organization

This API may be called a maximum of 15 times per minute.

*/
func (a *Client) PostAPIPublicV1User(params *PostAPIPublicV1UserParams) (*PostAPIPublicV1UserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIPublicV1UserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIPublicV1User",
		Method:             "POST",
		PathPattern:        "/api-public/v1/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIPublicV1UserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIPublicV1UserOK), nil

}

/*
PutAPIPublicV1UserUser updates a user

Update the designated user

This API may be called a maximum of 15 times per minute.

*/
func (a *Client) PutAPIPublicV1UserUser(params *PutAPIPublicV1UserUserParams) (*PutAPIPublicV1UserUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIPublicV1UserUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAPIPublicV1UserUser",
		Method:             "PUT",
		PathPattern:        "/api-public/v1/user/{user}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPIPublicV1UserUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAPIPublicV1UserUserOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
