// Code generated by go-swagger; DO NOT EDIT.

package incidents

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new incidents API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for incidents API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetAPIPublicV1Incidents gets current incident information

Get a list of the currently open, acknowledged and recently resolved incidents.
This API may be called a maximum of 6 times per minute.

*/
func (a *Client) GetAPIPublicV1Incidents(params *GetAPIPublicV1IncidentsParams) (*GetAPIPublicV1IncidentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIPublicV1IncidentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIPublicV1Incidents",
		Method:             "GET",
		PathPattern:        "/api-public/v1/incidents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIPublicV1IncidentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIPublicV1IncidentsOK), nil

}

/*
PatchAPIPublicV1IncidentsAck acknowledges an incident or list of incidents

The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.

This API may be called a maximum of 6 times per minute.

*/
func (a *Client) PatchAPIPublicV1IncidentsAck(params *PatchAPIPublicV1IncidentsAckParams) (*PatchAPIPublicV1IncidentsAckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPIPublicV1IncidentsAckParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAPIPublicV1IncidentsAck",
		Method:             "PATCH",
		PathPattern:        "/api-public/v1/incidents/ack",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAPIPublicV1IncidentsAckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchAPIPublicV1IncidentsAckOK), nil

}

/*
PatchAPIPublicV1IncidentsByUserAck acknowledges all incidents for which a user was paged

The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.

This API may be called a maximum of 6 times per minute.

*/
func (a *Client) PatchAPIPublicV1IncidentsByUserAck(params *PatchAPIPublicV1IncidentsByUserAckParams) (*PatchAPIPublicV1IncidentsByUserAckOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPIPublicV1IncidentsByUserAckParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAPIPublicV1IncidentsByUserAck",
		Method:             "PATCH",
		PathPattern:        "/api-public/v1/incidents/byUser/ack",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAPIPublicV1IncidentsByUserAckReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchAPIPublicV1IncidentsByUserAckOK), nil

}

/*
PatchAPIPublicV1IncidentsByUserResolve resolves all incidents for which a user was paged

The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.

This API may be called a maximum of 6 times per minute.

*/
func (a *Client) PatchAPIPublicV1IncidentsByUserResolve(params *PatchAPIPublicV1IncidentsByUserResolveParams) (*PatchAPIPublicV1IncidentsByUserResolveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPIPublicV1IncidentsByUserResolveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAPIPublicV1IncidentsByUserResolve",
		Method:             "PATCH",
		PathPattern:        "/api-public/v1/incidents/byUser/resolve",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAPIPublicV1IncidentsByUserResolveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchAPIPublicV1IncidentsByUserResolveOK), nil

}

/*
PatchAPIPublicV1IncidentsResolve resolves an incident or list of incidents

The incident(s) must be currently open.  The user supplied must be a valid VictorOps user and a member of your organization.

This API may be called a maximum of 6 times per minute.

*/
func (a *Client) PatchAPIPublicV1IncidentsResolve(params *PatchAPIPublicV1IncidentsResolveParams) (*PatchAPIPublicV1IncidentsResolveOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPIPublicV1IncidentsResolveParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAPIPublicV1IncidentsResolve",
		Method:             "PATCH",
		PathPattern:        "/api-public/v1/incidents/resolve",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAPIPublicV1IncidentsResolveReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchAPIPublicV1IncidentsResolveOK), nil

}

/*
PostAPIPublicV1Incidents creates a new incident

Create a new incident.

This call replicates the function of our
<a href="https://help.victorops.com/knowledge-base/manual-incident-creation/">manual incident creation process</a>.
Monitoring tools and custom integrations
should be configured using our
<a href="https://help.victorops.com/knowledge-base/victorops-restendpoint-integration/">REST Endpoint</a>.

This API may be called a maximum of 6 times per minute.

*/
func (a *Client) PostAPIPublicV1Incidents(params *PostAPIPublicV1IncidentsParams) (*PostAPIPublicV1IncidentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIPublicV1IncidentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIPublicV1Incidents",
		Method:             "POST",
		PathPattern:        "/api-public/v1/incidents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIPublicV1IncidentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIPublicV1IncidentsOK), nil

}

/*
PostAPIPublicV1IncidentsReroute reroutes one or more incidents to one or more new routable destinations

Reroute one or more incidents to one or more users and/or escalation policies

*/
func (a *Client) PostAPIPublicV1IncidentsReroute(params *PostAPIPublicV1IncidentsRerouteParams) (*PostAPIPublicV1IncidentsRerouteOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIPublicV1IncidentsRerouteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIPublicV1IncidentsReroute",
		Method:             "POST",
		PathPattern:        "/api-public/v1/incidents/reroute",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIPublicV1IncidentsRerouteReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIPublicV1IncidentsRerouteOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
