// Code generated by go-swagger; DO NOT EDIT.

package on_call

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new on call API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for on call API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetAPIPublicV1OncallCurrent gets an organization s on call users

Get all on-call uesrs/teams for your organization.

This API may be called a maximum of 1 times per minute.

*/
func (a *Client) GetAPIPublicV1OncallCurrent(params *GetAPIPublicV1OncallCurrentParams) (*GetAPIPublicV1OncallCurrentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIPublicV1OncallCurrentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIPublicV1OncallCurrent",
		Method:             "GET",
		PathPattern:        "/api-public/v1/oncall/current",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIPublicV1OncallCurrentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIPublicV1OncallCurrentOK), nil

}

/*
GetAPIPublicV1TeamTeamOncallSchedule gets a team s on call schedule

__NOTE: This call is deprecated. Please use `GET /api-public/v2/team/{team}/oncall/schedule`.__

Get the on-call schedule for a team, including on-call overrides.

This API may be called a maximum of 15 times per minute.

*/
func (a *Client) GetAPIPublicV1TeamTeamOncallSchedule(params *GetAPIPublicV1TeamTeamOncallScheduleParams) (*GetAPIPublicV1TeamTeamOncallScheduleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIPublicV1TeamTeamOncallScheduleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIPublicV1TeamTeamOncallSchedule",
		Method:             "GET",
		PathPattern:        "/api-public/v1/team/{team}/oncall/schedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIPublicV1TeamTeamOncallScheduleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIPublicV1TeamTeamOncallScheduleOK), nil

}

/*
GetAPIPublicV1UserUserOncallSchedule gets a user s on call schedule

__NOTE: This call is deprecated. Please use `GET /api-public/v2/user/{user}/oncall/schedule`.__

Get the on-call schedule for a user for all teams, including on-call overrides.

This API may be called a maximum of 15 times per minute.

*/
func (a *Client) GetAPIPublicV1UserUserOncallSchedule(params *GetAPIPublicV1UserUserOncallScheduleParams) (*GetAPIPublicV1UserUserOncallScheduleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIPublicV1UserUserOncallScheduleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIPublicV1UserUserOncallSchedule",
		Method:             "GET",
		PathPattern:        "/api-public/v1/user/{user}/oncall/schedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIPublicV1UserUserOncallScheduleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIPublicV1UserUserOncallScheduleOK), nil

}

/*
GetAPIPublicV2TeamTeamOncallSchedule gets a team s on call schedule

Get the on-call schedule for a team, including on-call overrides.

This API may be called a maximum of 15 times per minute.

*/
func (a *Client) GetAPIPublicV2TeamTeamOncallSchedule(params *GetAPIPublicV2TeamTeamOncallScheduleParams) (*GetAPIPublicV2TeamTeamOncallScheduleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIPublicV2TeamTeamOncallScheduleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIPublicV2TeamTeamOncallSchedule",
		Method:             "GET",
		PathPattern:        "/api-public/v2/team/{team}/oncall/schedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIPublicV2TeamTeamOncallScheduleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIPublicV2TeamTeamOncallScheduleOK), nil

}

/*
GetAPIPublicV2UserUserOncallSchedule gets a user s on call schedule

Get the on-call schedule for a user for all teams the user is on, including on-call overrides.

This API may be called a maximum of 15 times per minute.

*/
func (a *Client) GetAPIPublicV2UserUserOncallSchedule(params *GetAPIPublicV2UserUserOncallScheduleParams) (*GetAPIPublicV2UserUserOncallScheduleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIPublicV2UserUserOncallScheduleParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIPublicV2UserUserOncallSchedule",
		Method:             "GET",
		PathPattern:        "/api-public/v2/user/{user}/oncall/schedule",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIPublicV2UserUserOncallScheduleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIPublicV2UserUserOncallScheduleOK), nil

}

/*
PatchAPIPublicV1PoliciesPolicyOncallUser creates an on call override take on call

Replaces a currently on-call user in the escalation policy with another.  In many cases, the policy slug
will match the slug of the team that contains it.

This API may be called a maximum of 6 times per minute.

*/
func (a *Client) PatchAPIPublicV1PoliciesPolicyOncallUser(params *PatchAPIPublicV1PoliciesPolicyOncallUserParams) (*PatchAPIPublicV1PoliciesPolicyOncallUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPIPublicV1PoliciesPolicyOncallUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAPIPublicV1PoliciesPolicyOncallUser",
		Method:             "PATCH",
		PathPattern:        "/api-public/v1/policies/{policy}/oncall/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAPIPublicV1PoliciesPolicyOncallUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchAPIPublicV1PoliciesPolicyOncallUserOK), nil

}

/*
PatchAPIPublicV1TeamTeamOncallUser creates an on call override take on call

__NOTE: This API call is deprecated. Please use `PATCH /api-public/v2/policies/{policy}/oncall/user`__

Replaces a currently on-call user on the team with another.

This API may be called a maximum of 6 times per minute.

*/
func (a *Client) PatchAPIPublicV1TeamTeamOncallUser(params *PatchAPIPublicV1TeamTeamOncallUserParams) (*PatchAPIPublicV1TeamTeamOncallUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPatchAPIPublicV1TeamTeamOncallUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PatchAPIPublicV1TeamTeamOncallUser",
		Method:             "PATCH",
		PathPattern:        "/api-public/v1/team/{team}/oncall/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PatchAPIPublicV1TeamTeamOncallUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PatchAPIPublicV1TeamTeamOncallUserOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
