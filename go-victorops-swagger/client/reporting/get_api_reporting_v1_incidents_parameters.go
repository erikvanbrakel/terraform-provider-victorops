// Code generated by go-swagger; DO NOT EDIT.

package reporting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAPIReportingV1IncidentsParams creates a new GetAPIReportingV1IncidentsParams object
// with the default values initialized.
func NewGetAPIReportingV1IncidentsParams() *GetAPIReportingV1IncidentsParams {
	var (
		limitDefault  = float64(20)
		offsetDefault = float64(0)
	)
	return &GetAPIReportingV1IncidentsParams{
		Limit:  &limitDefault,
		Offset: &offsetDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAPIReportingV1IncidentsParamsWithTimeout creates a new GetAPIReportingV1IncidentsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAPIReportingV1IncidentsParamsWithTimeout(timeout time.Duration) *GetAPIReportingV1IncidentsParams {
	var (
		limitDefault  = float64(20)
		offsetDefault = float64(0)
	)
	return &GetAPIReportingV1IncidentsParams{
		Limit:  &limitDefault,
		Offset: &offsetDefault,

		timeout: timeout,
	}
}

// NewGetAPIReportingV1IncidentsParamsWithContext creates a new GetAPIReportingV1IncidentsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAPIReportingV1IncidentsParamsWithContext(ctx context.Context) *GetAPIReportingV1IncidentsParams {
	var (
		limitDefault  = float64(20)
		offsetDefault = float64(0)
	)
	return &GetAPIReportingV1IncidentsParams{
		Limit:  &limitDefault,
		Offset: &offsetDefault,

		Context: ctx,
	}
}

// NewGetAPIReportingV1IncidentsParamsWithHTTPClient creates a new GetAPIReportingV1IncidentsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAPIReportingV1IncidentsParamsWithHTTPClient(client *http.Client) *GetAPIReportingV1IncidentsParams {
	var (
		limitDefault  = float64(20)
		offsetDefault = float64(0)
	)
	return &GetAPIReportingV1IncidentsParams{
		Limit:      &limitDefault,
		Offset:     &offsetDefault,
		HTTPClient: client,
	}
}

/*GetAPIReportingV1IncidentsParams contains all the parameters to send to the API endpoint
for the get API reporting v1 incidents operation typically these are written to a http.Request
*/
type GetAPIReportingV1IncidentsParams struct {

	/*XVOAPIID
	  Your API ID

	*/
	XVOAPIID string
	/*XVOAPIKey
	  Your API Key

	*/
	XVOAPIKey string
	/*CurrentPhase
	  The current phase of the incident "resolved", "triggered" or "acknowledged". Multiple values can be separated with commas.

	*/
	CurrentPhase *string
	/*EntityID
	  The entity ID involved  This is the unique identifier for the entity causing the incident.

	*/
	EntityID *string
	/*Host
	  The host involved in the incident Multiple values can be separated with commas.

	*/
	Host *string
	/*IncidentNumber
	  The incident number as shown in VictorOps Multiple values and ranges are allowed: 4,5,20:50


	*/
	IncidentNumber *string
	/*Limit
	  The maximum number of matching incidents to return (100 max)

	*/
	Limit *float64
	/*Offset
	  The offset within the set of matching incidents

	*/
	Offset *float64
	/*Service
	  The service involved in the incident (if any) Multiple values can be separated with commas.

	*/
	Service *string
	/*StartedAfter
	  Return incidents started after this timestamp Specify the timestamp in ISO8601 format

	*/
	StartedAfter *string
	/*StartedBefore
	  Find incidents started before this timestamp  Specify the timestamp in ISO8601 format

	*/
	StartedBefore *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get API reporting v1 incidents params
func (o *GetAPIReportingV1IncidentsParams) WithTimeout(timeout time.Duration) *GetAPIReportingV1IncidentsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get API reporting v1 incidents params
func (o *GetAPIReportingV1IncidentsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get API reporting v1 incidents params
func (o *GetAPIReportingV1IncidentsParams) WithContext(ctx context.Context) *GetAPIReportingV1IncidentsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get API reporting v1 incidents params
func (o *GetAPIReportingV1IncidentsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get API reporting v1 incidents params
func (o *GetAPIReportingV1IncidentsParams) WithHTTPClient(client *http.Client) *GetAPIReportingV1IncidentsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get API reporting v1 incidents params
func (o *GetAPIReportingV1IncidentsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXVOAPIID adds the xVOAPIID to the get API reporting v1 incidents params
func (o *GetAPIReportingV1IncidentsParams) WithXVOAPIID(xVOAPIID string) *GetAPIReportingV1IncidentsParams {
	o.SetXVOAPIID(xVOAPIID)
	return o
}

// SetXVOAPIID adds the xVOApiId to the get API reporting v1 incidents params
func (o *GetAPIReportingV1IncidentsParams) SetXVOAPIID(xVOAPIID string) {
	o.XVOAPIID = xVOAPIID
}

// WithXVOAPIKey adds the xVOAPIKey to the get API reporting v1 incidents params
func (o *GetAPIReportingV1IncidentsParams) WithXVOAPIKey(xVOAPIKey string) *GetAPIReportingV1IncidentsParams {
	o.SetXVOAPIKey(xVOAPIKey)
	return o
}

// SetXVOAPIKey adds the xVOApiKey to the get API reporting v1 incidents params
func (o *GetAPIReportingV1IncidentsParams) SetXVOAPIKey(xVOAPIKey string) {
	o.XVOAPIKey = xVOAPIKey
}

// WithCurrentPhase adds the currentPhase to the get API reporting v1 incidents params
func (o *GetAPIReportingV1IncidentsParams) WithCurrentPhase(currentPhase *string) *GetAPIReportingV1IncidentsParams {
	o.SetCurrentPhase(currentPhase)
	return o
}

// SetCurrentPhase adds the currentPhase to the get API reporting v1 incidents params
func (o *GetAPIReportingV1IncidentsParams) SetCurrentPhase(currentPhase *string) {
	o.CurrentPhase = currentPhase
}

// WithEntityID adds the entityID to the get API reporting v1 incidents params
func (o *GetAPIReportingV1IncidentsParams) WithEntityID(entityID *string) *GetAPIReportingV1IncidentsParams {
	o.SetEntityID(entityID)
	return o
}

// SetEntityID adds the entityId to the get API reporting v1 incidents params
func (o *GetAPIReportingV1IncidentsParams) SetEntityID(entityID *string) {
	o.EntityID = entityID
}

// WithHost adds the host to the get API reporting v1 incidents params
func (o *GetAPIReportingV1IncidentsParams) WithHost(host *string) *GetAPIReportingV1IncidentsParams {
	o.SetHost(host)
	return o
}

// SetHost adds the host to the get API reporting v1 incidents params
func (o *GetAPIReportingV1IncidentsParams) SetHost(host *string) {
	o.Host = host
}

// WithIncidentNumber adds the incidentNumber to the get API reporting v1 incidents params
func (o *GetAPIReportingV1IncidentsParams) WithIncidentNumber(incidentNumber *string) *GetAPIReportingV1IncidentsParams {
	o.SetIncidentNumber(incidentNumber)
	return o
}

// SetIncidentNumber adds the incidentNumber to the get API reporting v1 incidents params
func (o *GetAPIReportingV1IncidentsParams) SetIncidentNumber(incidentNumber *string) {
	o.IncidentNumber = incidentNumber
}

// WithLimit adds the limit to the get API reporting v1 incidents params
func (o *GetAPIReportingV1IncidentsParams) WithLimit(limit *float64) *GetAPIReportingV1IncidentsParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the get API reporting v1 incidents params
func (o *GetAPIReportingV1IncidentsParams) SetLimit(limit *float64) {
	o.Limit = limit
}

// WithOffset adds the offset to the get API reporting v1 incidents params
func (o *GetAPIReportingV1IncidentsParams) WithOffset(offset *float64) *GetAPIReportingV1IncidentsParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the get API reporting v1 incidents params
func (o *GetAPIReportingV1IncidentsParams) SetOffset(offset *float64) {
	o.Offset = offset
}

// WithService adds the service to the get API reporting v1 incidents params
func (o *GetAPIReportingV1IncidentsParams) WithService(service *string) *GetAPIReportingV1IncidentsParams {
	o.SetService(service)
	return o
}

// SetService adds the service to the get API reporting v1 incidents params
func (o *GetAPIReportingV1IncidentsParams) SetService(service *string) {
	o.Service = service
}

// WithStartedAfter adds the startedAfter to the get API reporting v1 incidents params
func (o *GetAPIReportingV1IncidentsParams) WithStartedAfter(startedAfter *string) *GetAPIReportingV1IncidentsParams {
	o.SetStartedAfter(startedAfter)
	return o
}

// SetStartedAfter adds the startedAfter to the get API reporting v1 incidents params
func (o *GetAPIReportingV1IncidentsParams) SetStartedAfter(startedAfter *string) {
	o.StartedAfter = startedAfter
}

// WithStartedBefore adds the startedBefore to the get API reporting v1 incidents params
func (o *GetAPIReportingV1IncidentsParams) WithStartedBefore(startedBefore *string) *GetAPIReportingV1IncidentsParams {
	o.SetStartedBefore(startedBefore)
	return o
}

// SetStartedBefore adds the startedBefore to the get API reporting v1 incidents params
func (o *GetAPIReportingV1IncidentsParams) SetStartedBefore(startedBefore *string) {
	o.StartedBefore = startedBefore
}

// WriteToRequest writes these params to a swagger request
func (o *GetAPIReportingV1IncidentsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param X-VO-Api-Id
	if err := r.SetHeaderParam("X-VO-Api-Id", o.XVOAPIID); err != nil {
		return err
	}

	// header param X-VO-Api-Key
	if err := r.SetHeaderParam("X-VO-Api-Key", o.XVOAPIKey); err != nil {
		return err
	}

	if o.CurrentPhase != nil {

		// query param currentPhase
		var qrCurrentPhase string
		if o.CurrentPhase != nil {
			qrCurrentPhase = *o.CurrentPhase
		}
		qCurrentPhase := qrCurrentPhase
		if qCurrentPhase != "" {
			if err := r.SetQueryParam("currentPhase", qCurrentPhase); err != nil {
				return err
			}
		}

	}

	if o.EntityID != nil {

		// query param entityId
		var qrEntityID string
		if o.EntityID != nil {
			qrEntityID = *o.EntityID
		}
		qEntityID := qrEntityID
		if qEntityID != "" {
			if err := r.SetQueryParam("entityId", qEntityID); err != nil {
				return err
			}
		}

	}

	if o.Host != nil {

		// query param host
		var qrHost string
		if o.Host != nil {
			qrHost = *o.Host
		}
		qHost := qrHost
		if qHost != "" {
			if err := r.SetQueryParam("host", qHost); err != nil {
				return err
			}
		}

	}

	if o.IncidentNumber != nil {

		// query param incidentNumber
		var qrIncidentNumber string
		if o.IncidentNumber != nil {
			qrIncidentNumber = *o.IncidentNumber
		}
		qIncidentNumber := qrIncidentNumber
		if qIncidentNumber != "" {
			if err := r.SetQueryParam("incidentNumber", qIncidentNumber); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit float64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatFloat64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset float64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatFloat64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Service != nil {

		// query param service
		var qrService string
		if o.Service != nil {
			qrService = *o.Service
		}
		qService := qrService
		if qService != "" {
			if err := r.SetQueryParam("service", qService); err != nil {
				return err
			}
		}

	}

	if o.StartedAfter != nil {

		// query param startedAfter
		var qrStartedAfter string
		if o.StartedAfter != nil {
			qrStartedAfter = *o.StartedAfter
		}
		qStartedAfter := qrStartedAfter
		if qStartedAfter != "" {
			if err := r.SetQueryParam("startedAfter", qStartedAfter); err != nil {
				return err
			}
		}

	}

	if o.StartedBefore != nil {

		// query param startedBefore
		var qrStartedBefore string
		if o.StartedBefore != nil {
			qrStartedBefore = *o.StartedBefore
		}
		qStartedBefore := qrStartedBefore
		if qStartedBefore != "" {
			if err := r.SetQueryParam("startedBefore", qStartedBefore); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
