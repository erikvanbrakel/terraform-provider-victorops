// Code generated by go-swagger; DO NOT EDIT.

package reporting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new reporting API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for reporting API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetAPIReportingV1Incidents gets search incident history


__NOTE: This call is deprecated. Please use `GET /api-reporting/v2/incidents`.__

Retrieve incident history for your company, searching over date ranges and with filtering options.  This is historical
data, and may be up to 15 minutes behind real-time incident data.  By default, only resolved incidents will be returned.

This API may be called a maximum of once a minute.

Incident requests are paginated with a offset and limit query string parameters.
  The query for incidents is run and offset records are skipped, after which limit records will be returned.

The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.

On return, the total number of records available for that query will be returned in the payload as 'total'.

*/
func (a *Client) GetAPIReportingV1Incidents(params *GetAPIReportingV1IncidentsParams) (*GetAPIReportingV1IncidentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIReportingV1IncidentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIReportingV1Incidents",
		Method:             "GET",
		PathPattern:        "/api-reporting/v1/incidents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIReportingV1IncidentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIReportingV1IncidentsOK), nil

}

/*
GetAPIReportingV1TeamTeamOncallLog as list of shift changes for a team

Returns a log of user shift changes for the specified team. This is historical
data, and may be up to 15 minutes behind real-time log data.

This API may be called a maximum of 6 times per minute.

*/
func (a *Client) GetAPIReportingV1TeamTeamOncallLog(params *GetAPIReportingV1TeamTeamOncallLogParams) (*GetAPIReportingV1TeamTeamOncallLogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIReportingV1TeamTeamOncallLogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIReportingV1TeamTeamOncallLog",
		Method:             "GET",
		PathPattern:        "/api-reporting/v1/team/{team}/oncall/log",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIReportingV1TeamTeamOncallLogReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIReportingV1TeamTeamOncallLogOK), nil

}

/*
GetAPIReportingV2Incidents gets search incident history

Retrieve incident history for your company, searching over date ranges and with filtering options.

This API may be called a maximum of once a minute.

Incident requests are paginated with a offset and limit query string parameters.
  The query for incidents is run and offset records are skipped, after which limit records will be returned.

The default offset is 0 and the default limit is 20. The maximum value allowed for limit is 100.

Unless specified otherwise with the parameter currentPhase, the response will only contain resolved incidents.

On return, the total number of records available for that query will be returned in the payload as 'total'.

*/
func (a *Client) GetAPIReportingV2Incidents(params *GetAPIReportingV2IncidentsParams) (*GetAPIReportingV2IncidentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIReportingV2IncidentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIReportingV2Incidents",
		Method:             "GET",
		PathPattern:        "/api-reporting/v2/incidents",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIReportingV2IncidentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIReportingV2IncidentsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
