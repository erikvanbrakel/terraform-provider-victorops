// Code generated by go-swagger; DO NOT EDIT.

package reporting

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetAPIReportingV1TeamTeamOncallLogParams creates a new GetAPIReportingV1TeamTeamOncallLogParams object
// with the default values initialized.
func NewGetAPIReportingV1TeamTeamOncallLogParams() *GetAPIReportingV1TeamTeamOncallLogParams {
	var ()
	return &GetAPIReportingV1TeamTeamOncallLogParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetAPIReportingV1TeamTeamOncallLogParamsWithTimeout creates a new GetAPIReportingV1TeamTeamOncallLogParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetAPIReportingV1TeamTeamOncallLogParamsWithTimeout(timeout time.Duration) *GetAPIReportingV1TeamTeamOncallLogParams {
	var ()
	return &GetAPIReportingV1TeamTeamOncallLogParams{

		timeout: timeout,
	}
}

// NewGetAPIReportingV1TeamTeamOncallLogParamsWithContext creates a new GetAPIReportingV1TeamTeamOncallLogParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetAPIReportingV1TeamTeamOncallLogParamsWithContext(ctx context.Context) *GetAPIReportingV1TeamTeamOncallLogParams {
	var ()
	return &GetAPIReportingV1TeamTeamOncallLogParams{

		Context: ctx,
	}
}

// NewGetAPIReportingV1TeamTeamOncallLogParamsWithHTTPClient creates a new GetAPIReportingV1TeamTeamOncallLogParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetAPIReportingV1TeamTeamOncallLogParamsWithHTTPClient(client *http.Client) *GetAPIReportingV1TeamTeamOncallLogParams {
	var ()
	return &GetAPIReportingV1TeamTeamOncallLogParams{
		HTTPClient: client,
	}
}

/*GetAPIReportingV1TeamTeamOncallLogParams contains all the parameters to send to the API endpoint
for the get API reporting v1 team team oncall log operation typically these are written to a http.Request
*/
type GetAPIReportingV1TeamTeamOncallLogParams struct {

	/*XVOAPIID
	  Your API ID

	*/
	XVOAPIID string
	/*XVOAPIKey
	  Your API Key

	*/
	XVOAPIKey string
	/*End
	  Return shift changes occurring before this timestamp. The default is the end of the day at 11:59:59. Specify the timestamp in ISO8601 format

	*/
	End *strfmt.DateTime
	/*Start
	  Return shift changes occurring after this timestamp. The default is the start of the day at midnight. Specify the timestamp in ISO8601 format

	*/
	Start *strfmt.DateTime
	/*Team
	  The VictorOps team 'slug'

	*/
	Team string
	/*UserName
	  The VictorOps user ID. Return shift changes occurring during the interval specified for this user. Without this parameter, all relevant users (with respect to the specified interval) are returned

	*/
	UserName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get API reporting v1 team team oncall log params
func (o *GetAPIReportingV1TeamTeamOncallLogParams) WithTimeout(timeout time.Duration) *GetAPIReportingV1TeamTeamOncallLogParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get API reporting v1 team team oncall log params
func (o *GetAPIReportingV1TeamTeamOncallLogParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get API reporting v1 team team oncall log params
func (o *GetAPIReportingV1TeamTeamOncallLogParams) WithContext(ctx context.Context) *GetAPIReportingV1TeamTeamOncallLogParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get API reporting v1 team team oncall log params
func (o *GetAPIReportingV1TeamTeamOncallLogParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get API reporting v1 team team oncall log params
func (o *GetAPIReportingV1TeamTeamOncallLogParams) WithHTTPClient(client *http.Client) *GetAPIReportingV1TeamTeamOncallLogParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get API reporting v1 team team oncall log params
func (o *GetAPIReportingV1TeamTeamOncallLogParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithXVOAPIID adds the xVOAPIID to the get API reporting v1 team team oncall log params
func (o *GetAPIReportingV1TeamTeamOncallLogParams) WithXVOAPIID(xVOAPIID string) *GetAPIReportingV1TeamTeamOncallLogParams {
	o.SetXVOAPIID(xVOAPIID)
	return o
}

// SetXVOAPIID adds the xVOApiId to the get API reporting v1 team team oncall log params
func (o *GetAPIReportingV1TeamTeamOncallLogParams) SetXVOAPIID(xVOAPIID string) {
	o.XVOAPIID = xVOAPIID
}

// WithXVOAPIKey adds the xVOAPIKey to the get API reporting v1 team team oncall log params
func (o *GetAPIReportingV1TeamTeamOncallLogParams) WithXVOAPIKey(xVOAPIKey string) *GetAPIReportingV1TeamTeamOncallLogParams {
	o.SetXVOAPIKey(xVOAPIKey)
	return o
}

// SetXVOAPIKey adds the xVOApiKey to the get API reporting v1 team team oncall log params
func (o *GetAPIReportingV1TeamTeamOncallLogParams) SetXVOAPIKey(xVOAPIKey string) {
	o.XVOAPIKey = xVOAPIKey
}

// WithEnd adds the end to the get API reporting v1 team team oncall log params
func (o *GetAPIReportingV1TeamTeamOncallLogParams) WithEnd(end *strfmt.DateTime) *GetAPIReportingV1TeamTeamOncallLogParams {
	o.SetEnd(end)
	return o
}

// SetEnd adds the end to the get API reporting v1 team team oncall log params
func (o *GetAPIReportingV1TeamTeamOncallLogParams) SetEnd(end *strfmt.DateTime) {
	o.End = end
}

// WithStart adds the start to the get API reporting v1 team team oncall log params
func (o *GetAPIReportingV1TeamTeamOncallLogParams) WithStart(start *strfmt.DateTime) *GetAPIReportingV1TeamTeamOncallLogParams {
	o.SetStart(start)
	return o
}

// SetStart adds the start to the get API reporting v1 team team oncall log params
func (o *GetAPIReportingV1TeamTeamOncallLogParams) SetStart(start *strfmt.DateTime) {
	o.Start = start
}

// WithTeam adds the team to the get API reporting v1 team team oncall log params
func (o *GetAPIReportingV1TeamTeamOncallLogParams) WithTeam(team string) *GetAPIReportingV1TeamTeamOncallLogParams {
	o.SetTeam(team)
	return o
}

// SetTeam adds the team to the get API reporting v1 team team oncall log params
func (o *GetAPIReportingV1TeamTeamOncallLogParams) SetTeam(team string) {
	o.Team = team
}

// WithUserName adds the userName to the get API reporting v1 team team oncall log params
func (o *GetAPIReportingV1TeamTeamOncallLogParams) WithUserName(userName *string) *GetAPIReportingV1TeamTeamOncallLogParams {
	o.SetUserName(userName)
	return o
}

// SetUserName adds the userName to the get API reporting v1 team team oncall log params
func (o *GetAPIReportingV1TeamTeamOncallLogParams) SetUserName(userName *string) {
	o.UserName = userName
}

// WriteToRequest writes these params to a swagger request
func (o *GetAPIReportingV1TeamTeamOncallLogParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// header param X-VO-Api-Id
	if err := r.SetHeaderParam("X-VO-Api-Id", o.XVOAPIID); err != nil {
		return err
	}

	// header param X-VO-Api-Key
	if err := r.SetHeaderParam("X-VO-Api-Key", o.XVOAPIKey); err != nil {
		return err
	}

	if o.End != nil {

		// query param end
		var qrEnd strfmt.DateTime
		if o.End != nil {
			qrEnd = *o.End
		}
		qEnd := qrEnd.String()
		if qEnd != "" {
			if err := r.SetQueryParam("end", qEnd); err != nil {
				return err
			}
		}

	}

	if o.Start != nil {

		// query param start
		var qrStart strfmt.DateTime
		if o.Start != nil {
			qrStart = *o.Start
		}
		qStart := qrStart.String()
		if qStart != "" {
			if err := r.SetQueryParam("start", qStart); err != nil {
				return err
			}
		}

	}

	// path param team
	if err := r.SetPathParam("team", o.Team); err != nil {
		return err
	}

	if o.UserName != nil {

		// query param userName
		var qrUserName string
		if o.UserName != nil {
			qrUserName = *o.UserName
		}
		qUserName := qrUserName
		if qUserName != "" {
			if err := r.SetQueryParam("userName", qUserName); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
