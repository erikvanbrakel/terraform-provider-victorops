// Code generated by go-swagger; DO NOT EDIT.

package user_contact_methods

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new user contact methods API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for user contact methods API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
DeleteAPIPublicV1UserUserContactMethodsDevicesContactID deletes a contact device for a user

Delete a contact device for a user

This API may be called a maximum of 15 times per minute.

*/
func (a *Client) DeleteAPIPublicV1UserUserContactMethodsDevicesContactID(params *DeleteAPIPublicV1UserUserContactMethodsDevicesContactIDParams) (*DeleteAPIPublicV1UserUserContactMethodsDevicesContactIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIPublicV1UserUserContactMethodsDevicesContactIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPIPublicV1UserUserContactMethodsDevicesContactID",
		Method:             "DELETE",
		PathPattern:        "/api-public/v1/user/{user}/contact-methods/devices/{contactId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIPublicV1UserUserContactMethodsDevicesContactIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAPIPublicV1UserUserContactMethodsDevicesContactIDOK), nil

}

/*
DeleteAPIPublicV1UserUserContactMethodsEmailsContactID deletes a contact email for a user

Delete the indicated contact email for the user

This API may be called a maximum of 15 times per minute.

*/
func (a *Client) DeleteAPIPublicV1UserUserContactMethodsEmailsContactID(params *DeleteAPIPublicV1UserUserContactMethodsEmailsContactIDParams) (*DeleteAPIPublicV1UserUserContactMethodsEmailsContactIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIPublicV1UserUserContactMethodsEmailsContactIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPIPublicV1UserUserContactMethodsEmailsContactID",
		Method:             "DELETE",
		PathPattern:        "/api-public/v1/user/{user}/contact-methods/emails/{contactId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIPublicV1UserUserContactMethodsEmailsContactIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAPIPublicV1UserUserContactMethodsEmailsContactIDOK), nil

}

/*
DeleteAPIPublicV1UserUserContactMethodsPhonesContactID deletes a contact phone for a user

Delete the indicated contact phone for the user

This API may be called a maximum of 15 times per minute.

*/
func (a *Client) DeleteAPIPublicV1UserUserContactMethodsPhonesContactID(params *DeleteAPIPublicV1UserUserContactMethodsPhonesContactIDParams) (*DeleteAPIPublicV1UserUserContactMethodsPhonesContactIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAPIPublicV1UserUserContactMethodsPhonesContactIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "DeleteAPIPublicV1UserUserContactMethodsPhonesContactID",
		Method:             "DELETE",
		PathPattern:        "/api-public/v1/user/{user}/contact-methods/phones/{contactId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAPIPublicV1UserUserContactMethodsPhonesContactIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*DeleteAPIPublicV1UserUserContactMethodsPhonesContactIDOK), nil

}

/*
GetAPIPublicV1UserUserContactMethods gets a list of all contact methods for a user

Get the contact methods for a user

This API may be called a maximum of 15 times per minute.

*/
func (a *Client) GetAPIPublicV1UserUserContactMethods(params *GetAPIPublicV1UserUserContactMethodsParams) (*GetAPIPublicV1UserUserContactMethodsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIPublicV1UserUserContactMethodsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIPublicV1UserUserContactMethods",
		Method:             "GET",
		PathPattern:        "/api-public/v1/user/{user}/contact-methods",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIPublicV1UserUserContactMethodsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIPublicV1UserUserContactMethodsOK), nil

}

/*
GetAPIPublicV1UserUserContactMethodsDevices gets a list of all contact devices for a user

Get the contact methods for a user

This API may be called a maximum of 15 times per minute.

*/
func (a *Client) GetAPIPublicV1UserUserContactMethodsDevices(params *GetAPIPublicV1UserUserContactMethodsDevicesParams) (*GetAPIPublicV1UserUserContactMethodsDevicesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIPublicV1UserUserContactMethodsDevicesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIPublicV1UserUserContactMethodsDevices",
		Method:             "GET",
		PathPattern:        "/api-public/v1/user/{user}/contact-methods/devices",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIPublicV1UserUserContactMethodsDevicesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIPublicV1UserUserContactMethodsDevicesOK), nil

}

/*
GetAPIPublicV1UserUserContactMethodsDevicesContactID gets the indicated contact device for a user

Get the indicated contact device for a user

This API may be called a maximum of 15 times per minute.

*/
func (a *Client) GetAPIPublicV1UserUserContactMethodsDevicesContactID(params *GetAPIPublicV1UserUserContactMethodsDevicesContactIDParams) (*GetAPIPublicV1UserUserContactMethodsDevicesContactIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIPublicV1UserUserContactMethodsDevicesContactIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIPublicV1UserUserContactMethodsDevicesContactID",
		Method:             "GET",
		PathPattern:        "/api-public/v1/user/{user}/contact-methods/devices/{contactId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIPublicV1UserUserContactMethodsDevicesContactIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIPublicV1UserUserContactMethodsDevicesContactIDOK), nil

}

/*
GetAPIPublicV1UserUserContactMethodsEmails gets a list of all contact emails for a user

Get the contact emails for a user

This API may be called a maximum of 15 times per minute.

*/
func (a *Client) GetAPIPublicV1UserUserContactMethodsEmails(params *GetAPIPublicV1UserUserContactMethodsEmailsParams) (*GetAPIPublicV1UserUserContactMethodsEmailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIPublicV1UserUserContactMethodsEmailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIPublicV1UserUserContactMethodsEmails",
		Method:             "GET",
		PathPattern:        "/api-public/v1/user/{user}/contact-methods/emails",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIPublicV1UserUserContactMethodsEmailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIPublicV1UserUserContactMethodsEmailsOK), nil

}

/*
GetAPIPublicV1UserUserContactMethodsEmailsContactID gets the indicate contact email for a user

Get the indicated contact email for a user

This API may be called a maximum of 15 times per minute.

*/
func (a *Client) GetAPIPublicV1UserUserContactMethodsEmailsContactID(params *GetAPIPublicV1UserUserContactMethodsEmailsContactIDParams) (*GetAPIPublicV1UserUserContactMethodsEmailsContactIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIPublicV1UserUserContactMethodsEmailsContactIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIPublicV1UserUserContactMethodsEmailsContactID",
		Method:             "GET",
		PathPattern:        "/api-public/v1/user/{user}/contact-methods/emails/{contactId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIPublicV1UserUserContactMethodsEmailsContactIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIPublicV1UserUserContactMethodsEmailsContactIDOK), nil

}

/*
GetAPIPublicV1UserUserContactMethodsPhones gets a list of all contact phones for a user

Get the contact phones for a user

This API may be called a maximum of 15 times per minute.

*/
func (a *Client) GetAPIPublicV1UserUserContactMethodsPhones(params *GetAPIPublicV1UserUserContactMethodsPhonesParams) (*GetAPIPublicV1UserUserContactMethodsPhonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIPublicV1UserUserContactMethodsPhonesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIPublicV1UserUserContactMethodsPhones",
		Method:             "GET",
		PathPattern:        "/api-public/v1/user/{user}/contact-methods/phones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIPublicV1UserUserContactMethodsPhonesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIPublicV1UserUserContactMethodsPhonesOK), nil

}

/*
GetAPIPublicV1UserUserContactMethodsPhonesContactID gets the indicate contact phone for a user

Get the indicated contact phone for a user

This API may be called a maximum of 15 times per minute.

*/
func (a *Client) GetAPIPublicV1UserUserContactMethodsPhonesContactID(params *GetAPIPublicV1UserUserContactMethodsPhonesContactIDParams) (*GetAPIPublicV1UserUserContactMethodsPhonesContactIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIPublicV1UserUserContactMethodsPhonesContactIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIPublicV1UserUserContactMethodsPhonesContactID",
		Method:             "GET",
		PathPattern:        "/api-public/v1/user/{user}/contact-methods/phones/{contactId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIPublicV1UserUserContactMethodsPhonesContactIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIPublicV1UserUserContactMethodsPhonesContactIDOK), nil

}

/*
PostAPIPublicV1UserUserContactMethodsEmails creates a contact emails for a user

Create a contact email for a user

This API may be called a maximum of 15 times per minute.

*/
func (a *Client) PostAPIPublicV1UserUserContactMethodsEmails(params *PostAPIPublicV1UserUserContactMethodsEmailsParams) (*PostAPIPublicV1UserUserContactMethodsEmailsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIPublicV1UserUserContactMethodsEmailsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIPublicV1UserUserContactMethodsEmails",
		Method:             "POST",
		PathPattern:        "/api-public/v1/user/{user}/contact-methods/emails",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIPublicV1UserUserContactMethodsEmailsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIPublicV1UserUserContactMethodsEmailsOK), nil

}

/*
PostAPIPublicV1UserUserContactMethodsPhones creates a contact phones for a user

Create a contact phone for a user

This API may be called a maximum of 15 times per minute.

*/
func (a *Client) PostAPIPublicV1UserUserContactMethodsPhones(params *PostAPIPublicV1UserUserContactMethodsPhonesParams) (*PostAPIPublicV1UserUserContactMethodsPhonesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPostAPIPublicV1UserUserContactMethodsPhonesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PostAPIPublicV1UserUserContactMethodsPhones",
		Method:             "POST",
		PathPattern:        "/api-public/v1/user/{user}/contact-methods/phones",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PostAPIPublicV1UserUserContactMethodsPhonesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PostAPIPublicV1UserUserContactMethodsPhonesOK), nil

}

/*
PutAPIPublicV1UserUserContactMethodsDevicesContactID updates a contact device for a user

Update a contact device for a user

This API may be called a maximum of 15 times per minute.

*/
func (a *Client) PutAPIPublicV1UserUserContactMethodsDevicesContactID(params *PutAPIPublicV1UserUserContactMethodsDevicesContactIDParams) (*PutAPIPublicV1UserUserContactMethodsDevicesContactIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPutAPIPublicV1UserUserContactMethodsDevicesContactIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "PutAPIPublicV1UserUserContactMethodsDevicesContactID",
		Method:             "PUT",
		PathPattern:        "/api-public/v1/user/{user}/contact-methods/devices/{contactId}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PutAPIPublicV1UserUserContactMethodsDevicesContactIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*PutAPIPublicV1UserUserContactMethodsDevicesContactIDOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
