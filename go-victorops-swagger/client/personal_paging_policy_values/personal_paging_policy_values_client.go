// Code generated by go-swagger; DO NOT EDIT.

package personal_paging_policy_values

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new personal paging policy values API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for personal paging policy values API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
GetAPIPublicV1PoliciesTypesContacts gets the available contact types

Get the available contact types

description: "Email Address", type: "email"
description: "Phone Number", type: "phone"

This API may be called a maximum of 15 times per minute.

*/
func (a *Client) GetAPIPublicV1PoliciesTypesContacts(params *GetAPIPublicV1PoliciesTypesContactsParams) (*GetAPIPublicV1PoliciesTypesContactsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIPublicV1PoliciesTypesContactsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIPublicV1PoliciesTypesContacts",
		Method:             "GET",
		PathPattern:        "/api-public/v1/policies/types/contacts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIPublicV1PoliciesTypesContactsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIPublicV1PoliciesTypesContactsOK), nil

}

/*
GetAPIPublicV1PoliciesTypesNotifications gets the available notification types

Get the available notification types

description: "Send a push notification to all my devices", type: "push"
description: "Send an email to an email address", type: "email"
description: "Send an SMS to a phone number", type: "sms"
description: "Make a phone call to a phone number", type: "phone"

This API may be called a maximum of 15 times per minute.

*/
func (a *Client) GetAPIPublicV1PoliciesTypesNotifications(params *GetAPIPublicV1PoliciesTypesNotificationsParams) (*GetAPIPublicV1PoliciesTypesNotificationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIPublicV1PoliciesTypesNotificationsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIPublicV1PoliciesTypesNotifications",
		Method:             "GET",
		PathPattern:        "/api-public/v1/policies/types/notifications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIPublicV1PoliciesTypesNotificationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIPublicV1PoliciesTypesNotificationsOK), nil

}

/*
GetAPIPublicV1PoliciesTypesTimeouts gets the available timeout values

Get the available timeout values

description: "If still unacked after 1 minute", type: 1
description: "If still unacked after 5 minutes", type: 5
description: "If still unacked after 10 minutes", type: 10
description: "If still unacked after 15 minutes", type: 15
description: "If still unacked after 20 minutes", type: 20
description: "If still unacked after 25 minutes", type: 25
description: "If still unacked after 30 minutes", type: 30
description: "If still unacked after 45 minutes", type: 45
description: "If still unacked after 60 minutes", type: 60

This API may be called a maximum of 15 times per minute.

*/
func (a *Client) GetAPIPublicV1PoliciesTypesTimeouts(params *GetAPIPublicV1PoliciesTypesTimeoutsParams) (*GetAPIPublicV1PoliciesTypesTimeoutsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetAPIPublicV1PoliciesTypesTimeoutsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetAPIPublicV1PoliciesTypesTimeouts",
		Method:             "GET",
		PathPattern:        "/api-public/v1/policies/types/timeouts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{""},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetAPIPublicV1PoliciesTypesTimeoutsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*GetAPIPublicV1PoliciesTypesTimeoutsOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
